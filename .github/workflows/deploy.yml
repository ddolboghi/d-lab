name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env.production.local
        run: |
          echo "NODE_ENV=production" > .env.production.local
          echo "NEXT_PUBLIC_SITE_URL=${{ secrets.NEXT_PUBLIC_SITE_URL }}" >> .env.production.local
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env.production.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env.production.local

      - name: Cache nextjs build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build docker image and push to Docker Hub
        uses: docker/build-push-action@v4
        env:
          DOCKER_BUILDKIT: 1
          BUILDKIT_PROGRESS: plain
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/d-lab:latest
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: d-lab-runner

    steps:
      - name: Pull image from docker hub
        run: |
          sudo docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password ${{secrets.DOCKERHUB_PASSWORD}}
          sudo docker pull ${{secrets.DOCKERHUB_USERNAME}}/d-lab:latest

      - name: Check if container is running
        id: check-container
        run: |
          if sudo docker ps -a | grep -q d-lab; then
            echo "is-running=true" >> $GITHUB_OUTPUT
          else
            echo "is-running=false" >> $GITHUB_OUTPUT
          fi

      - name: Stop and remove container
        if: steps.check-container.outputs.is-running == 'true'
        run: |
          sudo docker stop d-lab
          sudo docker rm d-lab

      - name: Run new docker container
        run: sudo docker run -d --name d-lab -p 3000:3000 --net d-lab-network ${{secrets.DOCKERHUB_USERNAME}}/d-lab:latest

      - name: Delete old docker image
        run: sudo docker system prune -f
